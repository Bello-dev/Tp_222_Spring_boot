package com.tp222.allergies.data;

import com.tp222.allergies.model.entity.*;
import com.tp222.allergies.repository.*;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.boot.CommandLineRunner;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;
import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

/**
 * Initialise la base de donn√©es avec des donn√©es de test
 */
@Component
@RequiredArgsConstructor
@Slf4j
@Transactional
public class DataSeeder implements CommandLineRunner {
    
    private final UtilisateurRepository utilisateurRepository;
    private final AllergieRepository allergieRepository;
    private final CategorieRepository categorieRepository;
    private final AlimentRepository alimentRepository;
    private final AllergieUtilisateurRepository allergieUtilisateurRepository;
    private final ReactionAllergiqueRepository reactionAllergiqueRepository;
    
    @Override
    public void run(String... args) throws Exception {
        if (utilisateurRepository.count() == 0) {
            log.info("Initialisation des donn√©es de test...");
            
            // Cr√©ation des cat√©gories d'aliments
            List<Categorie> categories = creerCategories();
            
            // Cr√©ation des allergies
            List<Allergie> allergies = creerAllergies();
            
            // Cr√©ation des aliments
            List<Aliment> aliments = creerAliments(categories);
            
            // Cr√©ation des utilisateurs
            List<Utilisateur> utilisateurs = creerUtilisateurs();
            
            // Association allergies-utilisateurs
            creerAssociationsAllergies(utilisateurs, allergies);
            
            // Cr√©ation de r√©actions de test
            creerReactionsTest(utilisateurs, aliments);
            
            log.info("Donn√©es de test initialis√©es avec succ√®s !");
        }
    }
    
    private List<Categorie> creerCategories() {
        List<Categorie> categories = Arrays.asList(
            Categorie.builder()
                .nom("Fruits")
                .description("Fruits frais et secs")
                .couleurAffichage("#FF6B6B")
                .icone("üçé")
                .actif(true)
                .build(),
            
            Categorie.builder()
                .nom("L√©gumes")
                .description("L√©gumes frais et l√©gumineuses")
                .couleurAffichage("#4ECDC4")
                .icone("ü•ï")
                .actif(true)
                .build(),
            
            Categorie.builder()
                .nom("C√©r√©ales")
                .description("C√©r√©ales et produits c√©r√©aliers")
                .couleurAffichage("#FFE66D")
                .icone("üåæ")
                .actif(true)
                .build(),
            
            Categorie.builder()
                .nom("Prot√©ines")
                .description("Viandes, poissons, ≈ìufs")
                .couleurAffichage("#A8E6CF")
                .icone("ü•©")
                .actif(true)
                .build(),
            
            Categorie.builder()
                .nom("Produits laitiers")
                .description("Lait, fromages, yaourts")
                .couleurAffichage("#B4A7D6")
                .icone("ü•õ")
                .actif(true)
                .build()
        );
        
        return categorieRepository.saveAll(categories);
    }
    
    private List<Allergie> creerAllergies() {
        List<Allergie> allergies = Arrays.asList(
            Allergie.builder()
                .nom("Allergie aux arachides")
                .description("Allergie aux cacahu√®tes et produits d√©riv√©s")
                .niveauSeverite("CRITIQUE")
                .typeAllergie("ALIMENTAIRE")
                .symptomes("Urticaire, ≈ìd√®me, choc anaphylactique")
                .traitementRecommande("√âviction totale, auto-injecteur d'√©pin√©phrine")
                .actif(true)
                .build(),
            
            Allergie.builder()
                .nom("Allergie aux ≈ìufs")
                .description("Allergie aux prot√©ines d'≈ìuf")
                .niveauSeverite("MODERE")
                .typeAllergie("ALIMENTAIRE")
                .symptomes("√âruptions cutan√©es, troubles digestifs")
                .traitementRecommande("√âviction, antihistaminiques")
                .actif(true)
                .build(),
            
            Allergie.builder()
                .nom("Allergie au lait de vache")
                .description("Intol√©rance aux prot√©ines du lait")
                .niveauSeverite("MODERE")
                .typeAllergie("ALIMENTAIRE")
                .symptomes("Diarrh√©e, vomissements, ecz√©ma")
                .traitementRecommande("R√©gime sans lactose")
                .actif(true)
                .build(),
            
            Allergie.builder()
                .nom("Allergie au gluten")
                .description("Maladie c≈ìliaque")
                .niveauSeverite("SEVERE")
                .typeAllergie("ALIMENTAIRE")
                .symptomes("Troubles digestifs, fatigue, malabsorption")
                .traitementRecommande("R√©gime strictement sans gluten")
                .actif(true)
                .build(),
            
            Allergie.builder()
                .nom("Allergie aux fruits √† coque")
                .description("Allergie aux noix, amandes, noisettes")
                .niveauSeverite("SEVERE")
                .typeAllergie("ALIMENTAIRE")
                .symptomes("≈íd√®me, difficult√©s respiratoires")
                .traitementRecommande("√âviction, surveillance m√©dicale")
                .actif(true)
                .build()
        );
        
        return allergieRepository.saveAll(allergies);
    }
    
    private List<Aliment> creerAliments(List<Categorie> categories) {
        Categorie fruits = categories.get(0);
        Categorie legumes = categories.get(1);
        Categorie cereales = categories.get(2);
        Categorie proteines = categories.get(3);
        Categorie laitiers = categories.get(4);
        
        List<Aliment> aliments = Arrays.asList(
            // Fruits
            Aliment.builder()
                .nom("Pomme")
                .description("Pomme rouge Golden")
                .categorie(fruits)
                .calories(BigDecimal.valueOf(52))
                .proteines(BigDecimal.valueOf(0.3))
                .glucides(BigDecimal.valueOf(14))
                .lipides(BigDecimal.valueOf(0.2))
                .fibres(BigDecimal.valueOf(2.4))
                .calcium(BigDecimal.valueOf(6))
                .fer(BigDecimal.valueOf(0.12))
                .vitamineC(BigDecimal.valueOf(4.6))
                .scoreNutritionnel(85)
                .allergenesPotentiels("")
                .saisonDisponibilite("Automne, Hiver")
                .origineGeographique("France")
                .actif(true)
                .build(),
            
            // L√©gumes
            Aliment.builder()
                .nom("Carotte")
                .description("Carotte fra√Æche")
                .categorie(legumes)
                .calories(BigDecimal.valueOf(41))
                .proteines(BigDecimal.valueOf(0.9))
                .glucides(BigDecimal.valueOf(9.6))
                .lipides(BigDecimal.valueOf(0.2))
                .fibres(BigDecimal.valueOf(2.8))
                .calcium(BigDecimal.valueOf(33))
                .fer(BigDecimal.valueOf(0.3))
                .vitamineC(BigDecimal.valueOf(5.9))
                .scoreNutritionnel(90)
                .allergenesPotentiels("")
                .saisonDisponibilite("Toute l'ann√©e")
                .origineGeographique("France")
                .actif(true)
                .build(),
            
            // C√©r√©ales
            Aliment.builder()
                .nom("Bl√© complet")
                .description("Farine de bl√© compl√®te")
                .categorie(cereales)
                .calories(BigDecimal.valueOf(340))
                .proteines(BigDecimal.valueOf(13))
                .glucides(BigDecimal.valueOf(72))
                .lipides(BigDecimal.valueOf(2.5))
                .fibres(BigDecimal.valueOf(10.7))
                .calcium(BigDecimal.valueOf(34))
                .fer(BigDecimal.valueOf(3.6))
                .vitamineC(BigDecimal.valueOf(0))
                .scoreNutritionnel(75)
                .allergenesPotentiels("Gluten")
                .saisonDisponibilite("Toute l'ann√©e")
                .origineGeographique("France")
                .actif(true)
                .build(),
            
            // Prot√©ines
            Aliment.builder()
                .nom("≈íuf de poule")
                .description("≈íuf frais de poule")
                .categorie(proteines)
                .calories(BigDecimal.valueOf(155))
                .proteines(BigDecimal.valueOf(13))
                .glucides(BigDecimal.valueOf(1.1))
                .lipides(BigDecimal.valueOf(11))
                .fibres(BigDecimal.valueOf(0))
                .calcium(BigDecimal.valueOf(56))
                .fer(BigDecimal.valueOf(1.8))
                .vitamineC(BigDecimal.valueOf(0))
                .scoreNutritionnel(80)
                .allergenesPotentiels("≈íufs")
                .saisonDisponibilite("Toute l'ann√©e")
                .origineGeographique("France")
                .actif(true)
                .build(),
            
            // Produits laitiers
            Aliment.builder()
                .nom("Lait de vache")
                .description("Lait entier de vache")
                .categorie(laitiers)
                .calories(BigDecimal.valueOf(64))
                .proteines(BigDecimal.valueOf(3.2))
                .glucides(BigDecimal.valueOf(4.7))
                .lipides(BigDecimal.valueOf(3.6))
                .fibres(BigDecimal.valueOf(0))
                .calcium(BigDecimal.valueOf(113))
                .fer(BigDecimal.valueOf(0.1))
                .vitamineC(BigDecimal.valueOf(1))
                .scoreNutritionnel(70)
                .allergenesPotentiels("Lait, Lactose")
                .saisonDisponibilite("Toute l'ann√©e")
                .origineGeographique("France")
                .actif(true)
                .build(),
            
            // Aliment √† risque
            Aliment.builder()
                .nom("Cacahu√®tes")
                .description("Arachides grill√©es")
                .categorie(proteines)
                .calories(BigDecimal.valueOf(567))
                .proteines(BigDecimal.valueOf(26))
                .glucides(BigDecimal.valueOf(16))
                .lipides(BigDecimal.valueOf(49))
                .fibres(BigDecimal.valueOf(8))
                .calcium(BigDecimal.valueOf(92))
                .fer(BigDecimal.valueOf(4.6))
                .vitamineC(BigDecimal.valueOf(0))
                .scoreNutritionnel(60)
                .allergenesPotentiels("Arachides, Fruits √† coque")
                .saisonDisponibilite("Toute l'ann√©e")
                .origineGeographique("Import")
                .actif(true)
                .build()
        );
        
        return alimentRepository.saveAll(aliments);
    }
    
    private List<Utilisateur> creerUtilisateurs() {
        List<Utilisateur> utilisateurs = Arrays.asList(
            Utilisateur.builder()
                .username("marie.dupont")
                .email("marie.dupont@email.com")
                .motDePasse("password123") // En production, utiliser un hash
                .prenom("Marie")
                .nom("Dupont")
                .dateNaissance(LocalDate.of(1990, 5, 15))
                .sexe("F")
                .poids(65.0)
                .taille(170.0)
                .niveauActivite("MODERE")
                .objectifSante("Gestion des allergies alimentaires")
                .numeroTelephone("0123456789")
                .adresse("123 Rue de la R√©publique, 75001 Paris")
                .medecinTraitant("Dr. Martin")
                .contactUrgence("Pierre Dupont")
                .telephoneUrgence("0123456790")
                .actif(true)
                .build(),
            
            Utilisateur.builder()
                .username("jean.martin")
                .email("jean.martin@email.com")
                .motDePasse("password123")
                .prenom("Jean")
                .nom("Martin")
                .dateNaissance(LocalDate.of(1985, 8, 22))
                .sexe("M")
                .poids(80.0)
                .taille(180.0)
                .niveauActivite("INTENSE")
                .objectifSante("Pr√©vention allergies")
                .numeroTelephone("0123456791")
                .adresse("456 Avenue des Champs, 69000 Lyon")
                .medecinTraitant("Dr. Leroy")
                .contactUrgence("Sophie Martin")
                .telephoneUrgence("0123456792")
                .actif(true)
                .build()
        );
        
        return utilisateurRepository.saveAll(utilisateurs);
    }
    
    private void creerAssociationsAllergies(List<Utilisateur> utilisateurs, List<Allergie> allergies) {
        Utilisateur marie = utilisateurs.get(0);
        Utilisateur jean = utilisateurs.get(1);
        
        // Marie a une allergie aux ≈ìufs
        AllergieUtilisateur marieOeufs = AllergieUtilisateur.builder()
                .id(new AllergieUtilisateur.AllergieUtilisateurId(marie.getId(), allergies.get(1).getId()))
                .utilisateur(marie)
                .allergie(allergies.get(1)) // Allergie aux ≈ìufs
                .niveauSeverite("MODERE")
                .dateDiagnostic(LocalDateTime.of(2023, 3, 15, 10, 0))
                .diagnostiquePar("Dr. Martin")
                .notes("Diagnostic confirm√© par tests cutan√©s")
                .traitementActuel("√âviction des ≈ìufs, antihistaminiques en cas de contact")
                .actif(true)
                .build();
        
        // Jean a une allergie aux arachides (critique)
        AllergieUtilisateur jeanArachides = AllergieUtilisateur.builder()
                .id(new AllergieUtilisateur.AllergieUtilisateurId(jean.getId(), allergies.get(0).getId()))
                .utilisateur(jean)
                .allergie(allergies.get(0)) // Allergie aux arachides
                .niveauSeverite("CRITIQUE")
                .dateDiagnostic(LocalDateTime.of(2022, 1, 10, 14, 30))
                .diagnostiquePar("Dr. Leroy")
                .notes("R√©action anaphylactique s√©v√®re, port d'EpiPen obligatoire")
                .traitementActuel("√âviction totale, auto-injecteur d'√©pin√©phrine")
                .actif(true)
                .build();
        
        allergieUtilisateurRepository.saveAll(Arrays.asList(marieOeufs, jeanArachides));
    }
    
    private void creerReactionsTest(List<Utilisateur> utilisateurs, List<Aliment> aliments) {
        Utilisateur marie = utilisateurs.get(0);
        Utilisateur jean = utilisateurs.get(1);
        
        // R√©action de Marie aux ≈ìufs (mod√©r√©e)
        ReactionAllergique reactionMarieOeufs = ReactionAllergique.builder()
                .utilisateur(marie)
                .aliment(aliments.get(3)) // ≈íuf de poule
                .dateReaction(LocalDateTime.of(2024, 1, 15, 12, 30))
                .niveauSeverite("MODERE")
                .symptomes("√âruption cutan√©e, d√©mangeaisons, l√©gers troubles digestifs")
                .dureeReaction(120) // 2 heures
                .quantiteConsommee(BigDecimal.valueOf(50)) // 1/2 ≈ìuf
                .traitementUtilise("Antihistaminique oral")
                .contexteConsommation("≈íuf dans un g√¢teau fait maison")
                .lieuReaction("Domicile")
                .medecinConsulte(false)
                .hospitalisationRequise(false)
                .probabiliteAllergie(BigDecimal.valueOf(0.7)) // 70% - allergie confirm√©e
                .notes("R√©action typique, √©viter les ≈ìufs √† l'avenir")
                .build();
        
        // R√©action de Jean aux cacahu√®tes (critique)
        ReactionAllergique reactionJeanCacahuetes = ReactionAllergique.builder()
                .utilisateur(jean)
                .aliment(aliments.get(5)) // Cacahu√®tes
                .dateReaction(LocalDateTime.of(2024, 2, 3, 19, 45))
                .niveauSeverite("CRITIQUE")
                .symptomes("≈íd√®me facial, difficult√©s respiratoires, chute de tension")
                .dureeReaction(45) // 45 minutes
                .quantiteConsommee(BigDecimal.valueOf(5)) // Quelques grammes
                .traitementUtilise("EpiPen, transport aux urgences")
                .contexteConsommation("Traces dans un plat au restaurant")
                .lieuReaction("Restaurant")
                .medecinConsulte(true)
                .hospitalisationRequise(true)
                .probabiliteAllergie(BigDecimal.valueOf(0.95)) // 95% - r√©action anaphylactique
                .notes("R√©action s√©v√®re malgr√© √©viction, contamination crois√©e suspect√©e")
                .build();
        
        // R√©action test pour d√©clencher la d√©tection automatique (>30%)
        ReactionAllergique reactionAutoDetection = ReactionAllergique.builder()
                .utilisateur(marie)
                .aliment(aliments.get(4)) // Lait de vache
                .dateReaction(LocalDateTime.now().minusDays(1))
                .niveauSeverite("LEGER")
                .symptomes("Ballonnements, l√©gers crampes abdominales")
                .dureeReaction(60)
                .quantiteConsommee(BigDecimal.valueOf(200)) // 1 verre
                .traitementUtilise("Aucun")
                .contexteConsommation("Lait dans le caf√© du matin")
                .lieuReaction("Domicile")
                .medecinConsulte(false)
                .hospitalisationRequise(false)
                .probabiliteAllergie(BigDecimal.valueOf(0.4)) // 40% - d√©clenchera la d√©tection auto
                .notes("Premi√®re r√©action au lait, surveillance n√©cessaire")
                .build();
        
        reactionAllergiqueRepository.saveAll(Arrays.asList(
            reactionMarieOeufs, reactionJeanCacahuetes, reactionAutoDetection));
        
        log.info("Cr√©√© {} r√©actions de test avec d√©tection automatique", 3);
    }
}
